Let’s say your application has the following initial URL with search parameters:

Initial URL: https://example.com/products?category=electronics&sort=price
In this URL:

category is set to electronics.
sort is set to price.
Using prevParams
Now, when a user types a search query (for example, "laptop") in a search bar, we want to update the URL to include this new search parameter while keeping the existing parameters intact.

Here’s how it works step-by-step with prevParams:

Retrieve Current Parameters:

You might start by getting the current URL search parameters using new URLSearchParams(window.location.search). This will create an instance of URLSearchParams with the current parameters:

const prevParams = new URLSearchParams(window.location.search); // category=electronics&sort=price
Define the Function:

In your handleSearchChange function, you will receive the current parameters as prevParams. This allows you to work with the existing parameters without altering them directly.
Create a New Instance:

Inside the setSearchParams function, you create a new instance of URLSearchParams:

const newParams = new URLSearchParams(prevParams);
At this point, newParams is a copy of prevParams:

newParams: category=electronics&sort=price
Update Parameters:

Now, you check if there is a new search value. If the user types "laptop":

if (search) {
    newParams.set("search", search); // Adds search=laptop
} else {
    newParams.delete("search"); // Removes search parameter if empty
}
So, newParams will now look like this:

After adding search=laptop: category=electronics&sort=price&search=laptop
Return Updated Parameters:

Finally, you return the newParams to update the URL:

return newParams; // category=electronics&sort=price&search=laptop
Summary of prevParams
Preservation of State: prevParams allows you to keep the current state of the URL's search parameters, ensuring you don’t lose any existing parameters when adding or modifying.
Modularity: By working with a new instance of URLSearchParams, you can make changes without side effects on the original parameters.
User Experience: This approach enhances user experience by maintaining filter states, allowing users to add a search query while still preserving their previous selections (like category or sort order).
Visualizing the Process
Here's a visual representation of the process:

Before Update:

URL: https://example.com/products?category=electronics&sort=price
User Input: User types "laptop" in the search bar.

After Update:

URL: https://example.com/products?category=electronics&sort=price&search=laptop
Using prevParams ensures that your application remains user-friendly and efficient by effectively managing and updating URL parameters. Let me know if you have more questions or need further clarification!

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Imagine you have an e-commerce website with the following list of products:


const products = [
  { id: 1, title: "Laptop", category: "electronics" },
  { id: 2, title: "Smartphone", category: "electronics" },
  { id: 3, title: "Sofa", category: "furniture" },
  { id: 4, title: "Table", category: "furniture" },
  { id: 5, title: "Shirt", category: "clothing" }
];
URL Search Parameters
Suppose the current URL has the following search parameters:

?category=electronics&search=laptop
Code Breakdown
Now, let’s break down the filtering logic:


const filteredProducts = products.filter((product) => {
Filtering the Products:
The filter method creates a new array (filteredProducts) containing only the products that meet the conditions defined in the callback function.
Checking Category Filter

const categoryFilter = searchParams.get("category")
  ? product.category === searchParams.get("category")
  : true;
Category Filter Logic:
searchParams.get("category") retrieves the value of the category parameter from the URL. In this case, it returns "electronics".

The condition checks if the category parameter exists:

If it does, it compares the product's category with the value from the URL.
For example, for the first product (Laptop), it checks:

product.category === "electronics" // true
For products in other categories, like Sofa or Shirt, the condition will return false.
If the category parameter does not exist, categoryFilter defaults to true, meaning that the category filter will not exclude any products.

Checking Search Filter

const searchFilter = searchParams.get("search")
  ? product.title
      .toLowerCase()
      .includes(searchParams.get("search").toLowerCase())
  : true;
Search Filter Logic:
Similarly, searchParams.get("search") retrieves the value of the search parameter. Here, it returns "laptop".

The condition checks if the search parameter exists:

If it does, it checks if the product title (converted to lowercase) includes the search term (also converted to lowercase).
For the product "Laptop":

"laptop".includes("laptop") // true
For other products, like "Smartphone" or "Sofa", this will return false because they do not include the term "laptop".
If the search parameter does not exist, searchFilter defaults to true, allowing all products to pass through.

Final Return Condition

return categoryFilter && searchFilter;
Combining Filters:
Finally, both filters are combined using the logical AND operator (&&). This means a product will only be included in the filteredProducts array if both filters return true.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Let's say we have an array of products:


const products = [
  { name: "Product A", price: 30, rating: 4.5 },
  { name: "Product B", price: 20, rating: 4.0 },
  { name: "Product C", price: 50, rating: 5.0 }
];
And the URL has a search parameter sort=price_asc, meaning we want to sort by price in ascending order.

Retrieve Sorting Parameter:


const sortParam = "price_asc";
sortParam is "price_asc".
Extract Key and Order:


const [key, order] = sortParam.split("_");
key is "price" and order is "asc".
Sorting Logic:


const sortedProducts = [...products].sort((a, b) => {
  if (a[key] < b[key]) return order === "asc" ? -1 : 1;
  if (a[key] > b[key]) return order === "asc" ? 1 : -1;
  return 0;
});
Let's walk through the sorting step:

Compare Product A (price 30) and Product B (price 20):
Since 30 > 20 and order is "asc", Product B comes before Product A.
Compare Product B (price 20) and Product C (price 50):
Since 20 < 50 and order is "asc", Product B comes before Product C.
Compare Product A (price 30) and Product C (price 50):
Since 30 < 50 and order is "asc", Product A comes before Product C.
So, the sorted array sortedProducts will be:


const sortedProducts = [
  { name: "Product B", price: 20, rating: 4.0 },
  { name: "Product A", price: 30, rating: 4.5 },
  { name: "Product C", price: 50, rating: 5.0 }
];
This function dynamically sorts the products based on the specified key and order from the URL search parameters.